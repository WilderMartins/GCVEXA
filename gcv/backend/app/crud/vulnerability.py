from sqlalchemy.orm import Session
from sqlalchemy import func, cast, Date
from sqlalchemy.sql.expression import extract
from ..models.vulnerability import Vulnerability
import datetime

def get_vulnerability_counts_by_severity(db: Session):
    return db.query(Vulnerability.severity, func.count(Vulnerability.id)).group_by(Vulnerability.severity).all()

def get_remediation_rate(db: Session):
    total = db.query(Vulnerability.id).count()
    if total == 0:
        return 0.0
    remediated = db.query(Vulnerability.id).filter(Vulnerability.status == "remediated").count()
    return (remediated / total) * 100

def get_mttr(db: Session):
    # Mean Time to Remediate in days
    avg_diff = db.query(func.avg(func.julianday(Vulnerability.remediated_at) - func.julianday(Vulnerability.scan.started_at))).\
        filter(Vulnerability.status == "remediated").scalar()
    return avg_diff or 0.0

def get_critical_vulns_trend(db: Session, months: int = 6):
    # Novas vulnerabilidades críticas nos últimos X meses
    today = datetime.date.today()
    six_months_ago = today - datetime.timedelta(days=months*30)

    return db.query(
        extract('year', Vulnerability.scan.started_at).label('year'),
        extract('month', Vulnerability.scan.started_at).label('month'),
        func.count(Vulnerability.id)
    ).filter(
        Vulnerability.severity == 'High', # Assumindo 'High' como crítico por enquanto
        cast(Vulnerability.scan.started_at, Date) >= six_months_ago
    ).group_by('year', 'month').order_by('year', 'month').all()

def get_heatmap_data(db: Session):
    # Top 10 hosts com mais vulnerabilidades
    top_hosts = db.query(Vulnerability.host, func.count(Vulnerability.id).label('total_vulns')).\
        group_by(Vulnerability.host).order_by(func.count(Vulnerability.id).desc()).limit(10).all()

    top_host_names = [h.host for h in top_hosts]

    return db.query(
        Vulnerability.host,
        Vulnerability.severity,
        func.count(Vulnerability.id)
    ).filter(
        Vulnerability.host.in_(top_host_names)
    ).group_by(Vulnerability.host, Vulnerability.severity).all()

def create_vulnerability(db: Session, *, scan_id: int, vuln_data: dict):
    db_obj = Vulnerability(
        scan_id=scan_id,
        name=vuln_data.get("name"),
        severity=vuln_data.get("severity"),
        cvss_score=vuln_data.get("cvss_score"),
        description=vuln_data.get("description"),
        host=vuln_data.get("host"),
        port=vuln_data.get("port"),
    )
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

def bulk_create_vulnerabilities(db: Session, *, scan_id: int, vulnerabilities_data: list):
    vuln_objects = [
        Vulnerability(
            scan_id=scan_id,
            name=vuln.get("name"),
            severity=vuln.get("severity"),
            cvss_score=vuln.get("cvss_score"),
            description=vuln.get("description"),
            host=vuln.get("host"),
            port=vuln.get("port"),
        ) for vuln in vulnerabilities_data
    ]
    db.bulk_save_objects(vuln_objects)
    db.commit()
