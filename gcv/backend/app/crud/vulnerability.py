from sqlalchemy.orm import Session

from sqlalchemy import func
from ..models.vulnerability import VulnerabilityDefinition, VulnerabilityOccurrence
import datetime

def get_or_create_definition(db: Session, *, name: str, description: str, severity: str, signature: str) -> VulnerabilityDefinition:
    instance = db.query(VulnerabilityDefinition).filter(VulnerabilityDefinition.signature == signature).first()
    if instance:
        return instance
    else:
        new_instance = VulnerabilityDefinition(name=name, description=description, severity=severity, signature=signature)
        db.add(new_instance)
        db.commit()
        db.refresh(new_instance)
        return new_instance

from ..models.vulnerability_event import VulnerabilityEvent

def create_or_reopen_occurrence(db: Session, *, scan_id: int, asset_id: int, definition_id: int, port: str):
    existing_occurrence = db.query(VulnerabilityOccurrence).filter(
        VulnerabilityOccurrence.definition_id == definition_id,
        VulnerabilityOccurrence.asset_id == asset_id,
    ).first()

    if existing_occurrence:
        if existing_occurrence.status == 'remediated':
            existing_occurrence.status = 'open'
            existing_occurrence.remediated_at = None
            existing_occurrence.scan_id = scan_id

            # Criar evento de reabertura
            event = VulnerabilityEvent(occurrence_id=existing_occurrence.id, status_change="re-opened")
            db.add(event)
            db.commit()
        return existing_occurrence

    new_occurrence = VulnerabilityOccurrence(
        scan_id=scan_id, asset_id=asset_id, definition_id=definition_id, port=port, status='open'
    )
    db.add(new_occurrence)
    db.commit()
    db.refresh(new_occurrence)

    # Criar evento de criação
    event = VulnerabilityEvent(occurrence_id=new_occurrence.id, status_change="created")
    db.add(event)
    db.commit()

    return new_occurrence

def process_vulnerabilities_from_scan(db: Session, *, scan: "Scan", vulnerabilities_data: list):
    asset_id = scan.asset_id
    for vuln_data in vulnerabilities_data:
        # A assinatura agora é mais robusta
        signature = f"{vuln_data.get('signature_id')}:{vuln_data.get('host')}"

        definition = get_or_create_definition(
            db,
            name=vuln_data.get('name'),
            description=vuln_data.get('description'),
            severity=vuln_data.get('severity'),
            signature=signature
        )

        create_or_reopen_occurrence(
            db,
            scan_id=scan.id,
            asset_id=asset_id,
            definition_id=definition.id,
            port=vuln_data.get('port')
        )

# Funções de métricas (precisarão de refatoração futura, mas a base está aqui)
def get_vulnerability_counts_by_severity(db: Session):
    return db.query(VulnerabilityDefinition.severity, func.count(VulnerabilityOccurrence.id)).\
        join(VulnerabilityDefinition).\
        filter(VulnerabilityOccurrence.status == 'open').\
        group_by(VulnerabilityDefinition.severity).all()

