from sqlalchemy import Column, Integer, String, Float, Text, ForeignKey, DateTime, UniqueConstraint
from sqlalchemy.orm import relationship
from ..db.base_class import Base
import datetime

class VulnerabilityDefinition(Base):
    """
    Define um tipo único de vulnerabilidade, independente de quando ou onde foi encontrada.
    A unicidade é definida pelo 'signature'.
    """
    __tablename__ = "vulnerability_definitions"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True, nullable=False)
    description = Column(Text)
    severity = Column(String) # A severidade "canônica"
    signature = Column(String, unique=True, nullable=False, index=True) # e.g., "CWE-89:login.py"

    occurrences = relationship("VulnerabilityOccurrence", back_populates="definition")

class VulnerabilityOccurrence(Base):
    """
    Representa uma instância específica de uma vulnerabilidade encontrada em um scan.
    """
    __tablename__ = "vulnerability_occurrences"

    id = Column(Integer, primary_key=True, index=True)

    port = Column(String)
    status = Column(String, default="open", index=True) # open, remediated, false_positive
    remediated_at = Column(DateTime, nullable=True)

    definition_id = Column(Integer, ForeignKey("vulnerability_definitions.id"), nullable=False)
    definition = relationship("VulnerabilityDefinition", back_populates="occurrences")

    asset_id = Column(Integer, ForeignKey("assets.id"), nullable=False)
    asset = relationship("Asset", back_populates="vulnerabilities")

    scan_id = Column(Integer, ForeignKey("scans.id"), nullable=False)
    scan = relationship("Scan", back_populates="vulnerabilities")

# Adicionar a relação inversa nos outros modelos
from .asset import Asset
Asset.vulnerabilities = relationship("VulnerabilityOccurrence", back_populates="asset")

from .scan import Scan
Scan.vulnerabilities = relationship("VulnerabilityOccurrence", back_populates="scan")
