name: CI GCVEXA

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --with dev
      - name: Run ruff
        run: poetry run ruff .

  lint-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install dependencies
        working-directory: ./gcv/frontend
        run: npm install
      - name: Run eslint
        working-directory: ./gcv/frontend
        run: npm run lint

  test-backend:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: gcv_user
          POSTGRES_PASSWORD: gcv_password
          POSTGRES_DB: gcv_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install
      - name: Run tests
        env:
          DATABASE_URL: postgresql://gcv_user:gcv_password@localhost:5432/gcv_db_test
        run: poetry run pytest

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install dependencies
        working-directory: ./gcv/frontend
        run: npm install
      - name: Run tests
        working-directory: ./gcv/frontend
        run: npm run test

  build:
    runs-on: ubuntu-latest
    needs: [lint-backend, lint-frontend, test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # - name: Login to DockerHub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: .
          dockerfile: gcv/backend/Dockerfile
          push: false
          tags: your-dockerhub-username/gcvexa-backend:latest
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./gcv/frontend
          dockerfile: gcv/frontend/Dockerfile.prod
          push: false
          tags: your-dockerhub-username/gcvexa-frontend:latest
